// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"demo/gen/model"
)

func newOdsDict(db *gorm.DB, opts ...gen.DOOption) odsDict {
	_odsDict := odsDict{}

	_odsDict.odsDictDo.UseDB(db, opts...)
	_odsDict.odsDictDo.UseModel(&model.OdsDict{})

	tableName := _odsDict.odsDictDo.TableName()
	_odsDict.ALL = field.NewAsterisk(tableName)
	_odsDict.DictID = field.NewInt64(tableName, "dict_id")
	_odsDict.DictTypeCode = field.NewString(tableName, "dict_type_code")
	_odsDict.Code = field.NewInt64(tableName, "code")
	_odsDict.Name = field.NewString(tableName, "name")
	_odsDict.Sort = field.NewInt64(tableName, "sort")
	_odsDict.Description = field.NewString(tableName, "description")
	_odsDict.IsValid = field.NewInt64(tableName, "is_valid")

	_odsDict.fillFieldMap()

	return _odsDict
}

type odsDict struct {
	odsDictDo

	ALL          field.Asterisk
	DictID       field.Int64  // 字典ID
	DictTypeCode field.String // 字典类型Code
	Code         field.Int64  // 字典值
	Name         field.String // 字典名称/展示值
	Sort         field.Int64  // 排序
	Description  field.String // 字典描述
	IsValid      field.Int64  // 是否可用 EnumValid

	fieldMap map[string]field.Expr
}

func (o odsDict) Table(newTableName string) *odsDict {
	o.odsDictDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o odsDict) As(alias string) *odsDict {
	o.odsDictDo.DO = *(o.odsDictDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *odsDict) updateTableName(table string) *odsDict {
	o.ALL = field.NewAsterisk(table)
	o.DictID = field.NewInt64(table, "dict_id")
	o.DictTypeCode = field.NewString(table, "dict_type_code")
	o.Code = field.NewInt64(table, "code")
	o.Name = field.NewString(table, "name")
	o.Sort = field.NewInt64(table, "sort")
	o.Description = field.NewString(table, "description")
	o.IsValid = field.NewInt64(table, "is_valid")

	o.fillFieldMap()

	return o
}

func (o *odsDict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *odsDict) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["dict_id"] = o.DictID
	o.fieldMap["dict_type_code"] = o.DictTypeCode
	o.fieldMap["code"] = o.Code
	o.fieldMap["name"] = o.Name
	o.fieldMap["sort"] = o.Sort
	o.fieldMap["description"] = o.Description
	o.fieldMap["is_valid"] = o.IsValid
}

func (o odsDict) clone(db *gorm.DB) odsDict {
	o.odsDictDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o odsDict) replaceDB(db *gorm.DB) odsDict {
	o.odsDictDo.ReplaceDB(db)
	return o
}

type odsDictDo struct{ gen.DO }

type IOdsDictDo interface {
	gen.SubQuery
	Debug() IOdsDictDo
	WithContext(ctx context.Context) IOdsDictDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOdsDictDo
	WriteDB() IOdsDictDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOdsDictDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOdsDictDo
	Not(conds ...gen.Condition) IOdsDictDo
	Or(conds ...gen.Condition) IOdsDictDo
	Select(conds ...field.Expr) IOdsDictDo
	Where(conds ...gen.Condition) IOdsDictDo
	Order(conds ...field.Expr) IOdsDictDo
	Distinct(cols ...field.Expr) IOdsDictDo
	Omit(cols ...field.Expr) IOdsDictDo
	Join(table schema.Tabler, on ...field.Expr) IOdsDictDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOdsDictDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOdsDictDo
	Group(cols ...field.Expr) IOdsDictDo
	Having(conds ...gen.Condition) IOdsDictDo
	Limit(limit int) IOdsDictDo
	Offset(offset int) IOdsDictDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOdsDictDo
	Unscoped() IOdsDictDo
	Create(values ...*model.OdsDict) error
	CreateInBatches(values []*model.OdsDict, batchSize int) error
	Save(values ...*model.OdsDict) error
	First() (*model.OdsDict, error)
	Take() (*model.OdsDict, error)
	Last() (*model.OdsDict, error)
	Find() ([]*model.OdsDict, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OdsDict, err error)
	FindInBatches(result *[]*model.OdsDict, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OdsDict) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOdsDictDo
	Assign(attrs ...field.AssignExpr) IOdsDictDo
	Joins(fields ...field.RelationField) IOdsDictDo
	Preload(fields ...field.RelationField) IOdsDictDo
	FirstOrInit() (*model.OdsDict, error)
	FirstOrCreate() (*model.OdsDict, error)
	FindByPage(offset int, limit int) (result []*model.OdsDict, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOdsDictDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	CountGroupByType() (result []map[string]any, err error)
}

// select dict_type_code, count(dict_id) count from @@table
// where is_valid = 1
// group by dict_type_code
func (o odsDictDo) CountGroupByType() (result []map[string]any, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select dict_type_code, count(dict_id) count from ods_dict where is_valid = 1 group by dict_type_code ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (o odsDictDo) Debug() IOdsDictDo {
	return o.withDO(o.DO.Debug())
}

func (o odsDictDo) WithContext(ctx context.Context) IOdsDictDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o odsDictDo) ReadDB() IOdsDictDo {
	return o.Clauses(dbresolver.Read)
}

func (o odsDictDo) WriteDB() IOdsDictDo {
	return o.Clauses(dbresolver.Write)
}

func (o odsDictDo) Session(config *gorm.Session) IOdsDictDo {
	return o.withDO(o.DO.Session(config))
}

func (o odsDictDo) Clauses(conds ...clause.Expression) IOdsDictDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o odsDictDo) Returning(value interface{}, columns ...string) IOdsDictDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o odsDictDo) Not(conds ...gen.Condition) IOdsDictDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o odsDictDo) Or(conds ...gen.Condition) IOdsDictDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o odsDictDo) Select(conds ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o odsDictDo) Where(conds ...gen.Condition) IOdsDictDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o odsDictDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOdsDictDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o odsDictDo) Order(conds ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o odsDictDo) Distinct(cols ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o odsDictDo) Omit(cols ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o odsDictDo) Join(table schema.Tabler, on ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o odsDictDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o odsDictDo) RightJoin(table schema.Tabler, on ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o odsDictDo) Group(cols ...field.Expr) IOdsDictDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o odsDictDo) Having(conds ...gen.Condition) IOdsDictDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o odsDictDo) Limit(limit int) IOdsDictDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o odsDictDo) Offset(offset int) IOdsDictDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o odsDictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOdsDictDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o odsDictDo) Unscoped() IOdsDictDo {
	return o.withDO(o.DO.Unscoped())
}

func (o odsDictDo) Create(values ...*model.OdsDict) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o odsDictDo) CreateInBatches(values []*model.OdsDict, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o odsDictDo) Save(values ...*model.OdsDict) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o odsDictDo) First() (*model.OdsDict, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsDict), nil
	}
}

func (o odsDictDo) Take() (*model.OdsDict, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsDict), nil
	}
}

func (o odsDictDo) Last() (*model.OdsDict, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsDict), nil
	}
}

func (o odsDictDo) Find() ([]*model.OdsDict, error) {
	result, err := o.DO.Find()
	return result.([]*model.OdsDict), err
}

func (o odsDictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OdsDict, err error) {
	buf := make([]*model.OdsDict, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o odsDictDo) FindInBatches(result *[]*model.OdsDict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o odsDictDo) Attrs(attrs ...field.AssignExpr) IOdsDictDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o odsDictDo) Assign(attrs ...field.AssignExpr) IOdsDictDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o odsDictDo) Joins(fields ...field.RelationField) IOdsDictDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o odsDictDo) Preload(fields ...field.RelationField) IOdsDictDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o odsDictDo) FirstOrInit() (*model.OdsDict, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsDict), nil
	}
}

func (o odsDictDo) FirstOrCreate() (*model.OdsDict, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsDict), nil
	}
}

func (o odsDictDo) FindByPage(offset int, limit int) (result []*model.OdsDict, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o odsDictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o odsDictDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o odsDictDo) Delete(models ...*model.OdsDict) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *odsDictDo) withDO(do gen.Dao) *odsDictDo {
	o.DO = *do.(*gen.DO)
	return o
}
